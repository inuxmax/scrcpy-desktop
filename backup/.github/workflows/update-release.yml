name: Update Latest Release

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-and-release:
    name: Build wrapping and Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Clean previous builds
        run: npm run clean

      - name: Build Project Frontend
        run: npm run build

      - name: Create Release Package
        run: |
          mkdir scrcpy-desktop
          echo "Copying server code (src-server)..."
          cp -r src-server scrcpy-desktop/
          echo "Copying built frontend assets (public/dist)..."
          mkdir -p scrcpy-desktop/public/dist
          cp -r public/dist/* scrcpy-desktop/public/dist/
          echo "Copying vendor files (public/vendor)..."
          mkdir -p scrcpy-desktop/public/vendor
          cp -r public/vendor/* scrcpy-desktop/public/vendor/
          echo "Copying package files (package.json, package-lock.json)..."
          cp package.json package-lock.json scrcpy-desktop/
          echo "Copying simplified start scripts (start.bat, start.sh)..."
          cp scripts/start.bat scripts/start.sh scrcpy-desktop/
          echo "Copying documentation (README.md, LICENSE)..."
          if [ -f README.md ]; then cp README.md scrcpy-desktop/; fi
          if [ -f LICENSE ]; then cp LICENSE scrcpy-desktop/; fi
          echo "Creating archive (scrcpy-desktop-latest.zip)..."
          zip -r scrcpy-desktop-latest.zip scrcpy-desktop/
        working-directory: ${{ github.workspace }}

      - name: Delete Existing Latest Release
        run: |
          if gh release view "latest" --json tagName > /dev/null 2>&1; then
            echo "Deleting existing release with tag 'latest'..."
            gh release delete "latest" --yes
          else
            echo "No release with tag 'latest' found to delete."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete Existing Latest Tag
        run: |
          if git rev-parse "latest" >/dev/null 2>&1; then
            echo "Deleting local tag 'latest'..."
            git tag -d "latest"
            echo "Deleting remote tag 'latest'..."
            git push origin :refs/tags/latest --force || echo "Remote tag 'latest' not found or already deleted."
          else
            echo "No local tag 'latest' found to delete."
          fi

      - name: Create New Latest Tag
        run: |
          echo "Creating new tag 'latest' on commit ${{ github.sha }}..."
          git tag latest ${{ github.sha }}
          git push origin latest --force
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create New Latest Release
        id: create_release
        run: |
          echo "Creating new release with tag 'latest'..."
          gh release create "latest" \
            --title "latest" \
            --notes "Automatically updated to commit ${{ github.sha }} on $(date -u '+%Y-%m-%d %H:%M:%S UTC')" \
            --target ${{ github.sha }} \
            scrcpy-desktop-latest.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}